name: 'Go Actions Self-Validator'
description: 'Validates project configuration when go-actions are used in workflows'
author: 'Ryan Schumacher'

inputs:
  workflow-paths:
    description: 'Comma-separated list of workflow files to check (e.g., .github/workflows/ci.yaml,.github/workflows/release.yaml)'
    required: false
    default: '.github/workflows/*.yaml,.github/workflows/*.yml'
  comment-on-pr:
    description: 'Whether to comment on PR with validation results'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate go-actions usage
      id: validate
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Load the workflow validator directly without @actions dependencies
          const { validateWorkflows } = require('${{ github.action_path }}/../scripts-dist/self-validate-bundle/index.js');
          
          const result = validateWorkflows('.');
          
          console.log('Found go-actions usage:', result.actionsFound);
          
          // Set outputs
          core.setOutput('actions_found', result.actionsFound.join(','));
          core.setOutput('validation_failed', (!result.isValid).toString());
          
          if (!result.isValid) {
            const errorMessages = result.errors.map(error => `- ${error.message}`).join('\n');
            console.log('\n::error::Validation failed:');
            console.log(errorMessages);
            core.setOutput('error_messages', errorMessages);
            core.setFailed(`Validation failed with ${result.errors.length} error(s)`);
          } else {
            console.log('âœ… All validations passed!');
          }
          
          // Store results for unified PR comment
          const commentOnPr = '${{ inputs.comment-on-pr }}' === 'true';
          if (commentOnPr) {
            try {
              // Store validation results for unified comment system
              const { UnifiedPRComment, updateUnifiedComment, loadAllResults } = require('${{ github.action_path }}/../scripts-dist/self-validate-bundle/index.js');
              
              const selfValidateResult = {
                status: result.isValid ? 'success' : 'failure',
                actionsFound: result.actionsFound,
                errors: result.errors
              };
              
              // Store this job's results
              await UnifiedPRComment.storeResults('selfValidate', selfValidateResult);
              
              // Check if this is a pull request event
              const eventName = process.env.GITHUB_EVENT_NAME;
              if (eventName !== 'pull_request') {
                console.log('Skipping PR comment - not a pull request event');
                return;
              }
              
              // Load all stored results and update unified comment
              const allResults = UnifiedPRComment.loadStoredResults();
              await updateUnifiedComment(allResults);
              
              console.log('Updated unified go-actions comment');
            } catch (commentError) {
              console.log('Failed to update unified comment:', commentError.message);
              // Don't fail the action if commenting fails
            }
          }

    # Self-validation results are now stored for unified comment
    # Individual validation comments are consolidated into a single unified comment