name: 'Go Actions Self-Validator'
description: 'Validates project configuration when go-actions are used in workflows'
author: 'Ryan Schumacher'

inputs:
  workflow-paths:
    description: 'Comma-separated list of workflow files to check (e.g., .github/workflows/ci.yaml,.github/workflows/release.yaml)'
    required: false
    default: '.github/workflows/*.yaml,.github/workflows/*.yml'
  comment-on-pr:
    description: 'Whether to comment on PR with validation results'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate go-actions usage
      id: validate
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Load the workflow validator directly without @actions dependencies
          const { validateWorkflows } = require('${{ github.action_path }}/../scripts-dist/self-validate-bundle/index.js');
          
          const result = validateWorkflows('.');
          
          console.log('Found go-actions usage:', result.actionsFound);
          
          // Set outputs
          core.setOutput('actions_found', result.actionsFound.join(','));
          core.setOutput('validation_failed', (!result.isValid).toString());
          
          if (!result.isValid) {
            const errorMessages = result.errors.map(error => `- ${error.message}`).join('\n');
            console.log('\n::error::Validation failed:');
            console.log(errorMessages);
            core.setOutput('error_messages', errorMessages);
            core.setFailed(`Validation failed with ${result.errors.length} error(s)`);
          } else {
            console.log('‚úÖ All validations passed!');
          }
          
          // Generate PR comment if requested
          const commentOnPr = '${{ inputs.comment-on-pr }}' === 'true';
          if (commentOnPr) {
            try {
              console.log('Debug: github object type:', typeof github);
              console.log('Debug: github.context type:', typeof github?.context);
              console.log('Debug: event name:', github?.context?.eventName);
              console.log('Debug: payload keys:', github?.context?.payload ? Object.keys(github.context.payload) : 'no payload');
              
              if (!github || !github.context || github.context.eventName !== 'pull_request') {
                console.log('Skipping PR comment - not a pull request event or github context unavailable');
                return;
              }
              const { WorkflowValidator } = require('${{ github.action_path }}/../scripts-dist/self-validate-bundle/index.js');
              const validator = new WorkflowValidator('.');
              const comment = validator.formatPRComment(result);
              
              // Post or update comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                issue_number: github.context.issue.number,
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('## üîç Go Actions Validation')
              );
              
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
                console.log('Updated existing validation comment');
              } else {
                await github.rest.issues.createComment({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  issue_number: github.context.issue.number,
                  body: comment
                });
                console.log('Created new validation comment');
              }
            } catch (commentError) {
              console.log('Failed to post PR comment:', commentError.message);
              // Don't fail the action if commenting fails
            }
          }

    # Self-validation results are now stored for unified comment
    # Individual validation comments are consolidated into a single unified comment