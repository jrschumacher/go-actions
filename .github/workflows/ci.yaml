name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run TypeScript build
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Check test coverage
        run: npm run test:coverage

  validate-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate action.yaml files
        run: |
          # Check that all action.yaml files are valid
          for action_file in */action.yaml; do
            if [ -f "$action_file" ]; then
              echo "Validating $action_file"
              # Basic YAML syntax check
              python -c "import yaml; yaml.safe_load(open('$action_file'))"
              
              # Check required fields
              if ! grep -q "name:" "$action_file"; then
                echo "Error: $action_file missing 'name' field"
                exit 1
              fi
              
              if ! grep -q "description:" "$action_file"; then
                echo "Error: $action_file missing 'description' field"
                exit 1
              fi
              
              if ! grep -q "using:" "$action_file"; then
                echo "Error: $action_file missing 'using' field"
                exit 1
              fi
              
              echo "✅ $action_file is valid"
            fi
          done

  check-compiled-scripts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build TypeScript
        run: npm run build

      - name: Check if compiled scripts are up to date
        run: |
          if [ -n "$(git status --porcelain scripts-dist/)" ]; then
            echo "❌ Compiled scripts are out of date. Please run 'npm run build' and commit the changes."
            git status scripts-dist/
            git diff scripts-dist/
            exit 1
          else
            echo "✅ Compiled scripts are up to date"
          fi

  test-actions:
    runs-on: ubuntu-latest
    needs: [test, validate-actions, check-compiled-scripts]
    strategy:
      matrix:
        action: [ci, release, self-validate, comment]
        job: [test, lint, benchmark]
        exclude:
          # Only test relevant job types for ci action
          - action: release
            job: test
          - action: release  
            job: lint
          - action: release
            job: benchmark
          - action: self-validate
            job: test
          - action: self-validate
            job: lint  
          - action: self-validate
            job: benchmark
          - action: comment
            job: test
          - action: comment
            job: lint
          - action: comment
            job: benchmark
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create minimal Go project for testing
        run: |
          # Create a minimal Go module for testing
          echo 'module test-project' > go.mod
          echo 'go 1.21' >> go.mod
          
          # Create a simple Go file
          cat > main.go << 'EOF'
          package main
          
          import "fmt"
          
          func main() {
              fmt.Println("Hello, World!")
          }
          
          func Add(a, b int) int {
              return a + b
          }
          EOF
          
          # Create a test file
          cat > main_test.go << 'EOF'
          package main
          
          import "testing"
          
          func TestAdd(t *testing.T) {
              result := Add(2, 3)
              if result != 5 {
                  t.Errorf("Add(2, 3) = %d; want 5", result)
              }
          }
          
          func BenchmarkAdd(b *testing.B) {
              for i := 0; i < b.N; i++ {
                  Add(2, 3)
              }
          }
          EOF

      - name: Test CI action
        if: matrix.action == 'ci'
        uses: ./ci
        with:
          job: ${{ matrix.job }}

      - name: Test self-validate action  
        if: matrix.action == 'self-validate'
        uses: ./self-validate

      - name: Test comment action
        if: matrix.action == 'comment'
        uses: ./comment

  # Test release action in isolation since it requires special setup
  test-release-action:
    runs-on: ubuntu-latest
    needs: [test, validate-actions, check-compiled-scripts]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create minimal release configuration
        run: |
          # Create Release Please config
          cat > .release-please-config.json << 'EOF'
          {
            "packages": {
              ".": {
                "release-type": "go",
                "package-name": "test-project"
              }
            }
          }
          EOF
          
          # Create Release Please manifest
          cat > .release-please-manifest.json << 'EOF'
          {
            ".": "0.1.0"
          }
          EOF
          
          # Create minimal Go module
          echo 'module test-project' > go.mod
          echo 'go 1.21' >> go.mod

      - name: Test release action (dry-run)
        uses: ./release
        with:
          release-token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
        continue-on-error: true  # Release action may fail in test environment

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Check TypeScript formatting and linting
        run: |
          # Build to check for TypeScript errors
          npm run build
          
          # Check if there are any TypeScript errors
          if ! npx tsc --noEmit; then
            echo "❌ TypeScript compilation errors found"
            exit 1
          fi
          
          echo "✅ TypeScript checks passed"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets in code
        run: |
          # Basic check for common secret patterns
          if grep -r -E "(password|token|key|secret|api_key|apikey)" scripts/ --include="*.ts" --include="*.js" | grep -v -E "(test|spec|mock)" | grep -v -E "(interface|type|description|comment)" | head -5; then
            echo "⚠️ Potential secrets found in code. Please review."
            # Don't fail the build for this, just warn
          fi

  # Post unified comment for PR
  comment:
    runs-on: ubuntu-latest
    needs: [test, validate-actions, check-compiled-scripts, test-actions, test-release-action, lint-and-format]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Post unified CI results
        uses: ./comment