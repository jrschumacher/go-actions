name: 'Go Actions Comment'
description: 'Posts unified CI results comment to pull requests'
author: 'Ryan Schumacher'

inputs:
  github-token:
    description: 'GitHub token for posting comments'
    required: false
    default: ${{ github.token }}

runs:
  using: "composite"
  steps:
    - name: Post unified comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { UnifiedPRComment } = require('${{ github.action_path }}/../scripts-dist/ci-action-bundle/index.js');
          
          // Load all stored CI results from environment variables
          const allResults = UnifiedPRComment.loadStoredResults();
          console.log('Loaded results:', JSON.stringify(allResults, null, 2));
          
          // Check if we have any results to report
          const hasResults = Object.keys(allResults).some(key => 
            allResults[key] && allResults[key].status !== 'skipped'
          );
          
          if (!hasResults) {
            console.log('No CI results found to report');
            return;
          }
          
          // Create the unified comment
          const commenter = new UnifiedPRComment();
          const commentBody = commenter.formatUnifiedComment(allResults);
          
          // Find existing go-actions comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('# Go Actions Report')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
            console.log('Updated existing unified comment');
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
            console.log('Created new unified comment');
          }